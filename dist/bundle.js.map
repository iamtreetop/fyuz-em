{"version":3,"sources":["webpack:///./src/index.js"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,6BAA6B,oBAAoB;AACjD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA,uB;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,qB;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC,oBAAoB;AACrD;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,CAAC","file":"./bundle.js","sourcesContent":["// // const Game = require(\"./game\")\n// const Background = require(\"./background\");\n// const GamePiece = require(\"./pieces\")\n// // import Background from \"./background\";\n// const Player = require(\"./player\")\n// import Player from './player';\n\ndocument.addEventListener(\"DOMContentLoaded\", () =>{\n    const canvas = document.querySelector('canvas')\n    const ctx = canvas.getContext('2d');\n    // const backgroundEl = document.getElementById(\"background\");\n    // const ctxBg = backgroundEl.getContext(\"2d\");\n    // const background = new Background();\n    // Background();\n    // GamePiece();\n    // ctx.rect(0, 0, backgroundEl.width, backgroundEl.height);\n    // const grd = ctx.createLinearGradient(0, 0, backgroundEl.width, backgroundEl.height);\n\n    class Board{\n        makePos() {\n            const positions = [];\n            for (let i = 0; i < 20; i++) {\n                let pos = new Array(20);\n                positions.push(pos);\n            }\n        }\n\n        \n    }\n\n    class Player{\n        constructor(x, y , radius, color){\n            this.x = x\n            this.y = y\n            this.radius = radius\n            this.color = color\n        }\n\n        draw(){\n            ctx.beginPath();\n            ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\n            ctx.fillStyle = this.color\n            ctx.fill();\n        }\n\n        update() {\n            this.draw()\n        }\n    }\n\n    class Bubble {\n        constructor(x, y, radius, color, velocity) {\n            this.x = x\n            this.y = y\n            this.radius = radius\n            this.color = color\n            this.velocity = velocity\n        }\n\n        draw(){\n            ctx.beginPath();\n            ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\n            ctx.fillStyle = this.color\n            ctx.fill();\n        }\n\n        update(){\n            this.draw()\n            this.x = this.x + this.velocity.x\n            this.y = this.y + this.velocity.y\n        }\n    }\n\n\n    const midX = canvas.width / 2\n    const midY = canvas.height / 2\n    const projColor = `hsl(${Math.random() * 360}, 50%, 50%)`\n    const playerColor = projColor;\n    const player = new Player(midX, midY, 20, playerColor);\n    const bubbles = []\n\n    function distance(x1, y1, x2, y2) {\n        let xDist = x2 - x1;\n        let yDist = y2 - y1;\n        return Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2));\n    }\n\n    let circle1;\n\n    // testAngle\n    // const testCircle1 = new Player((midX + Math.cos(60)*175) - (Math.cos(60) * 20), (midY + Math.sin(60)*175) - (Math.cos(60) * 20), 20, 'red')\n    // const testCircle2 = new Player(midX + Math.cos(120)*140, midY + Math.sin(120)*140, 20, 'red')\n    // const testCircle3 = new Player(midX + Math.cos(180)*140, midY + Math.sin(180)*140, 20, 'red')\n    // const testCircle4 = new Player(midX + Math.cos(240)*140, midY + Math.sin(240)*140, 20, 'red')\n    // const testCircle5 = new Player(midX + Math.cos(300)*140, midY + Math.sin(300)*140, 20, 'red')\n    // const testCircle6 = new Player(midX + Math.cos(360)*140, midY + Math.sin(360)*140, 20, 'red')\n    const testCircle = new Player(midX, midY, 10, 'red')\n    // const testCircle2 = new Player(300, 125, 10, 'black')\n    \n\n    function init(){\n        circle1 = new Player(300, 250, 130, 'black');\n        // circle2 = new Player(50, 50, 20, 'red');\n    }\n\n    let bubble;\n    let animationId;\n    function animate(){ \n        \n        \n        animationId = requestAnimationFrame(animate);\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n        //background\n        ctx.rect(0, 0, canvas.width, canvas.height);\n        const grd = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);\n        grd.addColorStop(0, '#8ED6FF');\n        grd.addColorStop(1, '#004CB3');\n        ctx.fillStyle = grd;\n        ctx.fill();\n\n        //outer rim\n\n        ctx.beginPath();\n        ctx.arc(midX, midY, 175, 0, Math.PI * 2, false);\n        ctx.strokeStyle = \"black\"\n        ctx.stroke(); \n        \n        player.draw();\n        testCircle.update();\n        \n        let circleArr = []\n\n        // board.size\n        // let angle = (360/board.size)\n        // let radian = 57.3 * angle\n\n        for (let i = 0; i < 20; i++){\n            circleArr.push(\n                new Player((midX + Math.cos(0.314159*i)*150) - (Math.cos(0.314159*i)), (midY + Math.sin(0.314159*i)*150) - (Math.cos(0.314159*i)), 20, 'black')\n            )\n        }\n        circleArr.forEach(circle => {\n            circle.update();\n        })\n\n        bubbles.forEach(bubble => {\n            bubble.draw();\n            bubble.update();\n                \n            if (distance(circle1.x, circle1.y, bubble.x, bubble.y) > circle1.radius + bubble.radius) {\n                // make circle stop, not disappear\n                // circle1.color = 'black';\n                bubble.velocity = {\n                    x: 0,\n                    y: 0\n                };\n            }\n        })\n        // console.log('hi');\n    }\n\n    addEventListener('click', (event) => {\n        const angle = Math.atan2(event.offsetY - canvas.height / 2, event.offsetX- canvas.width / 2)\n        const velocity = {\n            x: Math.cos(angle) * 8,\n            y: Math.sin(angle) * 8\n        }\n\n        const projColor = `hsl(${Math.random() * 360}, 50%, 50%)`\n        bubbles.push(\n            new Bubble(canvas.width / 2, canvas.height / 2, 20, projColor, velocity)\n        )\n        console.log(event)\n    })\n\n    init();\n    animate();\n})\n\n"],"sourceRoot":""}